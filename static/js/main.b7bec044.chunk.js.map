{"version":3,"sources":["components/PostsList/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","utils/commentsApi.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/UserSelector/UserSelector.tsx","App.tsx","utils/getUsers.ts","utils/getPosts.ts","index.tsx"],"names":["PostsList","posts","handlePostInfo","useState","currentPostId","setCurrentPostId","useEffect","className","map","post","id","title","type","classNames","onClick","postId","prevState","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","deleteComments","commentId","fieldStatus","hasName","hasEmail","hasComment","NewCommentForm","onAddComment","nameValue","setNameValue","emailValue","setEmailValue","commentValue","setCommentValue","isLoading","setIsLoading","hasError","setHasError","hasInputValue","setHasInputValue","handleInputChange","event","target","name","value","addNewComment","a","email","addedComment","onSubmit","preventDefault","length","htmlFor","placeholder","onChange","PostDetails","selectedPost","comments","setComments","buttonHidden","setButtonHidden","removeError","setIsRemoveError","getPostsComments","commentFromServer","commentRemove","filter","comment","handleCommentRemove","href","newComment","UserSelector","users","currentUser","setCurrentUser","isOpen","setIsOpen","onFocus","onBlur","onMouseDown","stopPropagation","role","tabIndex","user","handleUserSelection","App","setUsers","selectedUser","setSelectedUser","setPosts","setSelectedPost","sidebarOpen","setSidebarOpen","loadUser","userFromServer","getPostsList","userId","postsFromServer","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b7bec044.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { Post } from '../../types/Post';\n\ntype Props = {\n  posts: Post[];\n  handlePostInfo: (postId: number) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({ posts, handlePostInfo }) => {\n  const [currentPostId, setCurrentPostId] = useState(0);\n\n  const handleOnClick = (postId: number) => {\n    setCurrentPostId(prevState => {\n      if (prevState === postId) {\n        return 0;\n      }\n\n      return postId;\n    });\n  };\n\n  useEffect(() => {\n    handlePostInfo(currentPostId);\n  }, [currentPostId]);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts && (\n            posts.map(post => {\n              const { id, title } = post;\n\n              return (\n                <tr data-cy=\"Post\" key={id}>\n                  <td data-cy=\"PostId\">{id}</td>\n\n                  <td data-cy=\"PostTitle\">\n                    {title}\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      type=\"button\"\n                      data-cy=\"PostButton\"\n                      className={classNames(\n                        'button',\n                        'is-link',\n                        { 'is-light': id !== currentPostId },\n                      )}\n                      onClick={() => handleOnClick(id)}\n                    >\n                      {(currentPostId === id) ? 'Close' : 'Open'}\n                    </button>\n                  </td>\n                </tr>\n              );\n            })\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Comment, CommentData } from '../types/Comment';\nimport { client } from './fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const postComments = (data: CommentData) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComments = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Comment } from '../../types/Comment';\nimport { postComments } from '../../utils/commentsApi';\n\ntype Props = {\n  postId: number;\n  onAddComment: (comment: Comment) => void;\n};\n\nconst fieldStatus = {\n  hasName: true,\n  hasEmail: true,\n  hasComment: true,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, onAddComment }) => {\n  const [nameValue, setNameValue] = useState('');\n  const [emailValue, setEmailValue] = useState('');\n  const [commentValue, setCommentValue] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [hasInputValue, setHasInputValue] = useState(fieldStatus);\n\n  const handleInputChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setHasInputValue(prevState => ({\n          ...prevState,\n          hasName: true,\n        }));\n        setNameValue(value);\n        break;\n\n      case 'email':\n        setHasInputValue(prevState => ({\n          ...prevState,\n          hasEmail: true,\n        }));\n        setEmailValue(value);\n        break;\n\n      case 'body':\n        setHasInputValue(prevState => ({\n          ...prevState,\n          hasComment: true,\n        }));\n        setCommentValue(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const addNewComment = async () => {\n    try {\n      setIsLoading(true);\n      setHasError(false);\n\n      const addedComment = await postComments({\n        postId,\n        name: nameValue,\n        email: emailValue,\n        body: commentValue,\n      });\n\n      onAddComment(addedComment);\n      setIsLoading(false);\n      setCommentValue('');\n    } catch {\n      setHasError(true);\n      setIsLoading(false);\n    }\n  };\n\n  const handleSubmitForm = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!nameValue || !emailValue || !commentValue) {\n      setHasInputValue(() => ({\n        hasName: !!nameValue,\n        hasEmail: !!emailValue.length,\n        hasComment: !!commentValue.length,\n      }));\n\n      return;\n    }\n\n    addNewComment();\n  };\n\n  const handleClearForm = () => {\n    setNameValue('');\n    setEmailValue('');\n    setCommentValue('');\n    setHasInputValue(fieldStatus);\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmitForm}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': !hasInputValue.hasName },\n            )}\n            value={nameValue}\n            onChange={handleInputChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n          {!hasInputValue.hasName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n        {!hasInputValue.hasName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': !hasInputValue.hasEmail },\n            )}\n            value={emailValue}\n            onChange={handleInputChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n          {!hasInputValue.hasEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n        {!hasInputValue.hasEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'input',\n              { 'is-danger': !hasInputValue.hasComment },\n            )}\n            value={commentValue}\n            onChange={handleInputChange}\n          />\n        </div>\n        {!hasInputValue.hasComment && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClearForm}\n          >\n            Clear\n          </button>\n        </div>\n\n        {hasError && (\n          <div\n            className=\"notification is-danger\"\n            data-cy=\"PostsLoadingError\"\n          >\n            Unable to add a new comment. Try again!\n          </div>\n        )}\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Comment } from '../../types/Comment';\nimport { Post } from '../../types/Post';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getComments, deleteComments } from '../../utils/commentsApi';\n\ntype Props = {\n  selectedPost: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost: {\n    id,\n    title,\n    body,\n  },\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [hasError, setHasError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [buttonHidden, setButtonHidden] = useState(false);\n  const [removeError, setIsRemoveError] = useState(false);\n\n  const getPostsComments = async () => {\n    try {\n      setHasError(false);\n      setIsLoading(true);\n      setButtonHidden(false);\n\n      const commentFromServer = await getComments(id);\n\n      setComments(commentFromServer);\n      setIsLoading(false);\n    } catch {\n      setHasError(true);\n      setIsLoading(false);\n    }\n  };\n\n  const handleAddComment = (newComment: Comment) => {\n    setComments(prevState => {\n      if (prevState.length) {\n        return [...prevState, newComment];\n      }\n\n      return [newComment];\n    });\n  };\n\n  const commentRemove = (commentId: number) => {\n    setComments(prevState => {\n      if (prevState) {\n        return comments.filter(comment => comment.id !== commentId);\n      }\n\n      return [];\n    });\n  };\n\n  const handleCommentRemove = async (commentId: number) => {\n    try {\n      setIsRemoveError(false);\n      commentRemove(commentId);\n      await deleteComments(commentId);\n    } catch {\n      setIsRemoveError(true);\n\n      setTimeout(() => {\n        setIsRemoveError(false);\n      }, 2000);\n    }\n  };\n\n  useEffect(() => {\n    getPostsComments();\n  }, [id]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {hasError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n          {!isLoading && !hasError && (\n            !comments.length\n              ? (\n                <>\n                  <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                    No comments yet\n                  </p>\n\n                  {!buttonHidden && (\n                    <button\n                      data-cy=\"WriteCommentButton\"\n                      type=\"button\"\n                      className=\"button is-link\"\n                      onClick={() => setButtonHidden(true)}\n                    >\n                      Write a comment\n                    </button>\n                  )}\n                </>\n              ) : (\n                <>\n                  <p className=\"title is-4\">Comments:</p>\n                  {comments.map(comment => (\n                    <article\n                      className=\"message is-small\"\n                      data-cy=\"Comment\"\n                      key={comment.id}\n                    >\n                      <div className=\"message-header\">\n                        <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                          {comment.name}\n                        </a>\n                        <button\n                          data-cy=\"CommentDelete\"\n                          type=\"button\"\n                          className=\"delete is-small\"\n                          aria-label=\"delete\"\n                          onClick={() => handleCommentRemove(comment.id)}\n                        >\n                          delete button\n                        </button>\n                      </div>\n\n                      <div className=\"message-body\" data-cy=\"CommentBody\">\n                        {comment.body}\n                      </div>\n                    </article>\n                  ))}\n\n                  {!buttonHidden && (\n                    <button\n                      data-cy=\"WriteCommentButton\"\n                      type=\"button\"\n                      className=\"button is-link\"\n                      onClick={() => setButtonHidden(true)}\n                    >\n                      Write a comment\n                    </button>\n                  )}\n                </>\n              )\n          )}\n        </div>\n\n        {buttonHidden && (\n          <NewCommentForm postId={id} onAddComment={handleAddComment} />\n        )}\n\n        {removeError && (\n          <div\n            className=\"notification is-danger\"\n            data-cy=\"PostsLoadingError\"\n          >\n            Something went wrong!\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  users: User[];\n  onChange: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({ users, onChange }) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleClick = (event: React.MouseEvent) => {\n    if (!isOpen) {\n      setIsOpen(true);\n\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n  };\n\n  const handleUserSelection = (\n    event: React.MouseEvent<HTMLAnchorElement>,\n    user: User,\n  ) => {\n    event.preventDefault();\n    onChange(user);\n    setCurrentUser(user);\n    setIsOpen(prevState => !prevState);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': isOpen })}\n      onFocus={() => setIsOpen(true)}\n      onBlur={() => setIsOpen(false)}\n      onMouseDown={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onMouseDown={() => setIsOpen(prevState => !prevState)}\n        >\n          <span>{currentUser ? currentUser.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              href={`#user-${user.id}`}\n              className={\n                classNames('dropdown-item',\n                  { 'is-active': currentUser?.id === user.id })\n              }\n              key={user.id}\n              onClick={(event) => handleUserSelection(event, user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getUsers } from './utils/getUsers';\nimport { getPosts } from './utils/getPosts';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  const loadUser = async () => {\n    try {\n      setHasError(false);\n\n      const userFromServer = await getUsers();\n\n      setUsers(userFromServer);\n    } catch {\n      setIsLoading(false);\n      setHasError(true);\n    }\n  };\n\n  const getPostsList = async (user : User) => {\n    try {\n      setIsLoading(true);\n      setHasError(false);\n      setSelectedUser(null);\n\n      const postsFromServer = await getPosts(user.id);\n\n      setSelectedUser(user);\n      setPosts(postsFromServer);\n      setIsLoading(false);\n    } catch {\n      setIsLoading(false);\n      setHasError(true);\n    }\n  };\n\n  const handlePostInfo = (postId: number) => {\n    if (posts) {\n      setSelectedPost(posts.find(post => post.id === postId) || null);\n    }\n\n    setSidebarOpen(postId !== 0);\n  };\n\n  useEffect(() => {\n    loadUser();\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector users={users} onChange={getPostsList} />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {(!selectedUser && !isLoading && !hasError) && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {(isLoading && !hasError) && (\n                  <Loader />\n                )}\n\n                {(hasError && !isLoading) && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {selectedUser && (\n                  !posts?.length\n                    ? (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    ) : (\n                      <PostsList\n                        posts={posts}\n                        handlePostInfo={handlePostInfo}\n                      />\n                    )\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': sidebarOpen },\n            )}\n          >\n            <div className=\"tile is-child box is-success\">\n              {selectedPost && <PostDetails selectedPost={selectedPost} />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from './fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from './fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}